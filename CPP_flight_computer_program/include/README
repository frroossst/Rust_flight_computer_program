These are broad guidelines and NOT rules, break them if it doesn't make sense

We classify headers into 4 types

1. Package
    A set of functions that serve a common function, eg: a statistics package
    prefixed with a "package_"

2. Debug
    Functions associated with easy debugging, eg: I2C Scanner, these are only
    activated or in use when a directive or variable is enabled, prefixed with
    a "debug_"

3. Sensor
    Functions that serve as a wrapper/API for sensors, sensors include
    peripherals like memory and sensors like acceleration. tldr; anything that
    has a hardware component that the flight computer interacts with is a 
    sensor, prefixed with a "sensor_"

4. Organisational
    Some headers are just for storing default variables or macros and fall
    under this categories, need not be prefixed.

NOTE: Other naming scheme maybe applied if it makes sense, for example, the 
    header file containing the enum definition for the statemachine is called
    statemachine_t.h as the _t suffix denotes type by convention.

********************************************************************************

This directory is intended for project header files.

A header file is a file containing C declarations and macro definitions
to be shared between several project source files. You request the use of a
header file in your project source file (C, C++, etc)
located in `src` folder
    by including it,
    with the C preprocessing directive `#include '.

```src / main.c

#include "header.h"

          int
          main(void)
	{
	...
	}
```

    Including a header file produces the same results as copying the header file
        into each source file that needs it.Such copying would be time -
    consuming
        and error -
    prone.With a header file,
    the related declarations appear
        in only one place.If they need to be changed,
    they can be changed in one
        place,
    and programs that include the header file will automatically use the new version when next recompiled.The header file eliminates the labor of
            finding and changing all the copies as well as the risk that a failure to
                find one copy will result in inconsistencies within a program.

        In C,
    the usual convention is to give header files names that end with `.h'. It is most portable to use only letters, digits, dashes, and underscores in header file names, and at most one dot.

    Read more about using header files in official GCC documentation :

    *Include Syntax *Include Operation *Once -
    Only Headers *Computed Includes

        https: // gcc.gnu.org/onlinedocs/cpp/Header-Files.html
